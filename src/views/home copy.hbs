{{!toJSON this.data}}
{{#section 'head'}}
<style>
    * {
        box-sizing: border-box;
    }

    html,
    body {
        padding: 0;
        margin: 0;
    }

    body {
        font-family: BlinkMacSystemFont, -apple-system, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
    }

    table {
        min-width: 100%;
        width: auto;
        flex: 1;
        display: grid;
        border-collapse: collapse;
        /* These are just initial values which are overriden using JavaScript when a column is resized */
        /*grid-template-columns:
            minmax(150px, 1fr) minmax(150px, 1.67fr) minmax(150px, 1.67fr) minmax(150px, 1.67fr) minmax(150px, 3.33fr) minmax(150px, 1.67fr) minmax(150px, 3.33fr) minmax(150px, 1.67fr);
    */
        grid-template-columns: repeat(2, 1fr);

    }

    thead,
    tbody,
    tr {
        display: contents;
    }

    th,
    td {
        padding: 15px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    th {
        position: sticky;
        top: 0;
        background: #6c7ae0;
        text-align: left;
        font-weight: normal;
        font-size: 1.1rem;
        color: white;
        position: relative;
    }

    th:last-child {
        border: 0;
    }

    .resize-handle {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        background: black;
        opacity: 0;
        width: 3px;
        cursor: col-resize;
    }

    .resize-handle:hover,
    /* The following selector is needed so the handle is visible during resize even if the mouse isn't over the handle anymore */
    .header--being-resized .resize-handle {
        opacity: 0.5;
    }

    th:hover .resize-handle {
        opacity: 0.3;
    }

    td {
        padding-top: 10px;
        padding-bottom: 10px;
        color: #808080;
    }

    tr:nth-child(even) td {
        background: #f8f6ff;
    }
</style>
{{/section}}

<h1>{{name}}</h1>

<table>
    <thead class="thead-dark">
        <tr>
            {{#each headers}}
            <th>{{v}} <span class="resize-handle"></span></th>

            {{/each}}
        </tr>
    </thead>

    <tbody>
        {{#each rows}}
        <tr>
            {{#each cols}}
            <td>
                {{v}}
            </td>
            {{/each}}
        </tr>
        {{/each}}
    </tbody>
</table>

<hr class="mt-5 mb-5" />


{{!-- <table>
    <thead>
        <tr>
            <th data-type="numeric">ID <span class="resize-handle"></span></th>
            <th data-type="text-short">First name <span class="resize-handle"></span></th>
            <th data-type="text-short">Last name <span class="resize-handle"></span></th>
            <th data-type="text-short">Email <span class="resize-handle"></span></th>
            <th data-type="text-long">Street <span class="resize-handle"></span></th>
            <th data-type="text-short">Country <span class="resize-handle"></span></th>
            <th data-type="text-long">University <span class="resize-handle"></span></th>
            <th data-type="text-short">IBAN <span class="resize-handle"></span></th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>000001</td>
            <td>Lani</td>
            <td>Ovendale</td>
            <td>lovendale0@w3.org</td>
            <td>7850 Old Shore Drive</td>
            <td>United Kingdom</td>
            <td>University of Plymouth</td>
            <td>BG34 MPVP 8782 88EX H1CJ SC</td>
        </tr>
        <tr>
            <td>000002</td>
            <td>Israel</td>
            <td>Tassell</td>
            <td>itassell1@ow.ly</td>
            <td>245 Merchant Circle</td>
            <td>Macedonia</td>
            <td>South East European University</td>
            <td>FR11 4824 2942 41H9 XBHC 46P2 O86</td>
        </tr>
        <tr>
            <td>000003</td>
            <td>Eveleen</td>
            <td>Mercer</td>
            <td>emercer2@ow.ly</td>
            <td>70700 Kipling Pass</td>
            <td>Portugal</td>
            <td>Instituto Superior Novas Profiss√µes - INP</td>
            <td>GR96 7559 456P GUAN WTAJ 3VPB S0P</td>
        </tr>

    </tbody>
</table> --}}


{{#section 'script-after'}}

<script>

    // Our real web app uses Vue.js but I'll stick to plain JavaScript here

    const min = 150;
    // The max (fr) values for grid-template-columns
    const columnTypeToRatioMap = {
        numeric: 1,
        'text-short': 1.67,
        'text-long': 3.33,
    };

    const table = document.querySelector('table');
    /*
      The following will soon be filled with column objects containing
      the header element and their size value for grid-template-columns 
    */
    const columns = [];
    let headerBeingResized;

    // The next three functions are mouse event callbacks

    // Where the magic happens. I.e. when they're actually resizing
    const onMouseMove = (e) => requestAnimationFrame(() => {
        console.log('onMouseMove');

        // Calculate the desired width
        horizontalScrollOffset = document.documentElement.scrollLeft;
        const width = (horizontalScrollOffset + e.clientX) - headerBeingResized.offsetLeft;

        // Update the column object with the new size value
        const column = columns.find(({ header }) => header === headerBeingResized);
        column.size = Math.max(min, width) + 'px'; // Enforce our minimum

        // For the other headers which don't have a set width, fix it to their computed width
        columns.forEach((column) => {
            if (column.size.startsWith('minmax')) { // isn't fixed yet (it would be a pixel value otherwise)
                column.size = parseInt(column.header.clientWidth, 10) + 'px';
            }
        });

        /* 
          Update the column sizes
          Reminder: grid-template-columns sets the width for all columns in one value
        */
        table.style.gridTemplateColumns = columns
            .map(({ header, size }) => size)
            .join(' ');
    });

    // Clean up event listeners, classes, etc.
    const onMouseUp = () => {
        console.log('onMouseUp');

        window.removeEventListener('mousemove', onMouseMove);
        window.removeEventListener('mouseup', onMouseUp);
        headerBeingResized.classList.remove('header--being-resized');
        headerBeingResized = null;
    };

    // Get ready, they're about to resize
    const initResize = ({ target }) => {
        console.log('initResize');

        headerBeingResized = target.parentNode;
        window.addEventListener('mousemove', onMouseMove);
        window.addEventListener('mouseup', onMouseUp);
        headerBeingResized.classList.add('header--being-resized');
    };

    // Let's populate that columns array and add listeners to the resize handles
    document.querySelectorAll('th').forEach((header) => {
        const max = columnTypeToRatioMap[header.dataset.type] + 'fr';
        columns.push({
            header,
            // The initial size value for grid-template-columns:
            size: `minmax(${min}px, ${max})`,
        });
        header.querySelector('.resize-handle').addEventListener('mousedown', initResize);
    });

</script>

{{/section}}